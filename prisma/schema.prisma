// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles    Role[]
  staff    Staff[]
  students Student[]
}

model Role {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  user      User     @relation(fields: [id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions Permission[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  name        String
  description String?
  roleId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role? @relation(fields: [roleId], references: [id])
}

model Staff {
  id         Int       @id @default(autoincrement())
  uuid       String    @default(uuid())
  name       String
  birthPlace String?
  address    String?
  phone      String?
  email      String?
  nip        String?   @unique
  type       String
  startDate  DateTime
  endDate    DateTime?
  mediaId    Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user  User    @relation(fields: [id], references: [id])
  photo Media?  @relation(fields: [mediaId], references: [id])
  Kelas Kelas[]
}

model Student {
  id         Int       @id @default(autoincrement())
  uuid       String    @default(uuid())
  name       String
  birthPlace String?
  address    String?
  nis        String    @unique
  nisn       String    @unique
  phone      String?
  email      String?
  startYear  DateTime
  endYear    DateTime?
  mediaId    Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user  User   @relation(fields: [id], references: [id])
  photo Media? @relation(fields: [mediaId], references: [id])
}

model Media {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Artikel         Artikel[]         @relation("ArtikelMedia") //one to many from artikel
  Jurusan         Jurusan[]         @relation("JurusanMedia")
  Ekstrakurikuler Ekstrakurikuler[] @relation("EkstrakurikulerMedia")
  Fasilitas       Fasilitas[]       @relation("FasilitasMedia")
  staff           Staff[] //one to one
  students        Student[]
  ConfigSchool    ConfigSchool[]
}

model ConfigSchool {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  name      String
  about     String
  visiMisi  String
  address   String?
  mediaId   Int?
  telp      String?
  email     String
  npsn      String
  fb        String?
  ig        String?
  tiktok    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logo Media? @relation(fields: [mediaId], references: [id]) // Relasi one-to-one untuk logo
}

model Artikel {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  title       String
  description String
  date        String
  status      String
  type        String
  link        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  media Media[] @relation("ArtikelMedia")
}

model Kelas {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  jurusan     String
  tahunAjaran String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  waliKelas Staff? @relation(fields: [staffId], references: [id])
  staffId   Int?
}

model Jurusan {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  media Media[] @relation("JurusanMedia")
}

model Ekstrakurikuler {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  media Media[] @relation("EkstrakurikulerMedia")
}

model Fasilitas {
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  media Media[] @relation("FasilitasMedia")
}
